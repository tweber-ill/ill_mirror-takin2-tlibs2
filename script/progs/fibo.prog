#
# @author Tobias Weber <tweber@ill.fr>
# @date 2020
# @license GPLv3, see 'LICENSE' file
# @desc Forked on 18/July/2020 from my privately developed "matrix_calc" project (https://github.com/t-weber/matrix_calc).
#


func int fibo(int n)
{
	if n <= 2 then
		ret 1;
	else
		ret fibo(n-1) + fibo(n-2);
}


#
# fibo(n-1) = fibo(n-1)
# fibo(n)   = fibo(n-2) + fibo(n-1)
#
# ( fibo(n-1) )      (0 1) ( fibo(n-2) )
# ( fibo(n)   )   =  (1 1) ( fibo(n-1) )
#
func scalar fibo_closed(scalar n)
{
	if n <= 1 then
		ret 1;

	mat 2 2 M;
	M[0,0] = 0; M[0,1] = 1;
	M[1,0] = 1; M[1,1] = 1;

	vec 2 eval_re, eval_im;
	mat 2 2 evec_re, evec_im;
	assign eval_re, eval_im, evec_re, evec_im = eigenvecs(M);
	#putstr("eigenvals: " + eval_re);
	#putstr("eigenvecs (in columns): " + evec_re);

	mat 2 2 evec_inv = evec_re^(-1);
	#putstr("inverse eigenvecs (in columns): " + evec_inv);

	# use initial values fibo(1) = fibo(2) = 1 for normalisation
	vec 2 norm = evec_inv*[ 1, 1 ];

	vec 2 fibos = 
		norm[0]*pow(eval_re[0], n-1) * evec_re[0~1, 0] + 
		norm[1]*pow(eval_re[1], n-1) * evec_re[0~1, 1];

	#putstr("results: " + fibos);
	ret fibos[0];
}


func int fac(int n)
{
	if n <= 1 then
		ret 1;

	ret n*fac(n-1);
}


func start()
{
	loop 1==1 do
	{
		int n = getint("n = ");

		putstr(n + "! = " + fac(n));
		putstr("fib(" + n + ") = " + fibo(n) + " (closed form: " + fibo_closed(n) + ")");
	}
}
